= module.import("./Boolean.keli")
= module.import("./Box.keli")
= module.import("./Math.keli")
= module.import("./String.keli")


List.of(A Type) = choice
    .Nil
    .Cons($.value(A) next(List.of(A)))

{A Type}
(this List.of(A)).toString
    | String
    = "[".++(this._toString).++("]")

{A Type}
(this List.of(A))._toString
    | String
    = this.
        if(.Nil) then
            ("")

        if(.Cons(c)) then
            (c.value.toString.++(",").++(c.next._toString))

"""
Get the n-th element of a list.
```c
//example
[1,2,3].toList.at(0) = Box.With(1)
```
"""
{A Type}
(this List.of(A)).at(index Int) = 
    this._at(index) currentIndex(0)


{A Type}
(this List.of(A))._at(index Int) currentIndex(ci Int)
    | Box.of(A)
    =
    this.
        if(.Nil) then
            (Box.Empty)
    
        if(.Cons(c)) then
            (ci.equals(index).
                if(.True) then
                    (Box.With(c.value))
            
                if(.False) then
                    (c.next._at(index) currentIndex(ci.+(1))))


"""
Get the first element of a list.
```c
//example
[1,2,3].toList.head = Box.Filled.value(1)
[].toList.head = Box.Empty
```
"""
{A Type}
(this List.of(A)).head
    | Box.of(A)
    = this.
        if(.Nil) then
            (Box.Empty)
        if(.Cons(c)) then
            (Box.With(c.value))

"""
Get the last element of a list.
```c
//example
[1,2,3].toList.last = Box.With(3)
[].toList.last = Box.Empty
```
"""
{A Type}
(this List.of(A)).last
    | Box.of(A)
    = this.
        if(.Nil) then
            (Box.Empty)
        if(.Cons(c)) then
            (c.next.
                if(.Nil) then
                    (Box.With(c.value))
                else
                    (c.next.last))

"""
Get all elements of this List, except the first element.
```c
//example
[1,2,3].toList.tail = [2,3].toList
[].toList.tail = [].toList
```
"""
{A Type}
(this List.of(A)).tail
    | List.of(A)
    = this.
        if(.Nil) then
            (List.Nil)
        if(.Cons(c)) then
            (c.next)

"""
Get all the elements of this List, except the last element.
```c
//example
[1,2,3].toList.init = [1,2].toList
[].toList.init = [].toList
```
"""
{A Type}
(this List.of(A)).init
    | List.of(A)
    = this.reverse.tail.reverse

"""
Get the number of elements in this List.
```c
//example
[1,2,3].toList.length = 3
[].toList.length = 0
```
"""
{A Type}
(this List.of(A)).length 
    | Int 
    = this.
        if(.Nil) then
            (0)

        if(.Cons(c)) then
            (1.+(c.next.length))

"""
Check if this List is Empty. 
This should be used instead of using `myList.length.==(0)`, as this function is more efficient. 
```c
//example
[].toList.isEmpty = Boolean.False
[1,2].toList.isEmpty = Boolean.True
```
"""
{A Type}
(this List.of(A)).isEmpty
    | Boolean
    = this.
        if(.Nil) then
            (Boolean.True)

        else
            (Boolean.False)

"""
Add an element at the back of this List.
```c
//example
[1,2,3].toList.append(4) = [1,2,3,4].toList
```
"""
{A Type}
(this List.of(A)).append(element A) 
    | List.of(A)
    = this.
        if(.Nil) then
            (List.Cons($.value(element) next(List.Nil)))

        if(.Cons(c)) then
            (List.Cons(c.next(.append(element))))

"""
Add an element at the front of this List.
```c
//example
[1,2,3].toList.prepend(0) = [0,1,2,3].toList
```
"""
{A Type}
(this List.of(A)).prepend(element A)
    | List.of(A)
    = this.
        if(.Nil) then
            (List.Cons($.value(element) next(List.Nil)))
    
        if(.Cons(c)) then
            (List.Cons($.value(element) next(List.Cons(c))))


"""
Take all elements from this List that fulfils the given predicate.
```c
//example
[1,2,3,4,5].toList.where(.>(2)) = [3,4,5].toList
```
"""
{A Type}
(this List.of(A)).where(f Function.in(A) out(Boolean))
    | List.of(A)
    = this.
        if(.Nil) then
            (List.Nil)

        if(.Cons(c)) then
            (f.apply(c.value).
                if(.True) then
                    (List.Cons(c.next(.where(f))))

                if(.False) then
                    (c.next.where(f)))

"""
Transform all elements in this List with the given function.
```c
//example
[1,2,3,4].toList.select(.*(2)) = [2,4,6,8].toList
```
"""
{A Type} {B Type}
(this List.of(A)).select(f Function.in(A) out(B))
    | List.of(B)
    = this.
        if(.Nil) then
            (List.Nil)
        if(.Cons(c)) then
            (List.Cons($.value(f.apply(c.value)) next(c.next.select(f))))

"""
```c
//example
[1,2,3].toList.select(.*(2)) where(.>(2)) = [6].toList
```
"""
{A Type} {B Type}
(this List.of(A)).
    select(f Function.in(A) out(B))
    where(g Function.in(A) out(Boolean))
    | List.of(B)
    = this.
        if(.Nil) then
            (List.Nil)
        if(.Cons(c)) then
            (g.apply(c.value).
                if(.True) then
                    (List.Cons($.
                        value(f.apply(c.value)) 
                        next(c.next.select(f) where(g))))
                if(.False) then
                    (c.next.select(f) where(g)))

"""
To check if some element of this List fulfils the given predicate.
```c
//example
[1,2,3].toList.some(.>(2))  = Boolean.True
[1,2,3].toList.some(.>(10)) = Boolean.False
```
"""
{A Type}
(this List.of(A)).some(predicate Function.in(A) out(Boolean))
    | Boolean
    = this.
        if(.Nil) then
            (Boolean.False)

        if(.Cons(c)) then
            (predicate.apply(c.value).
                if(.True) then
                    (Boolean.True)

                if(.False) then
                    (c.next.some(predicate)))

"""
To check if every element of this List fulfils the given predicate.
```c
//example
[1,2,3].toList.every(.>(0)) = Boolean.True
[1,2,3].toList.every(.>(2)) = Boolean.False
```
"""
{A Type}
(this List.of(A)).every(predicate Function.in(A) out(Boolean))
    | Boolean
    = this.
        if(.Nil) then
            (Boolean.True)

        if(.Cons(c)) then
            (predicate.apply(c.value).
                if(.True) then
                    (c.next.every(predicate))

                if(.False) then
                    (Boolean.False))


"""
Concat two Lists together.
```c
//example
[1,2,3].toList.concat([4,5,6].toList) = [1,2,3,4,5,6].toList
```
"""
{A Type}
(this List.of(A)).concat(that List.of(A))
    | List.of(A)
    = this.
        if(.Nil) then
            (that)

        if(.Cons(c)) then
            (List.Cons(c.next(.concat(that))))

"""
Reverse this List.
```c
//example
[1,2,3].toList.reverse = [3,2,1]
[].toList.reverse = []
```
"""
{A Type}
(this List.of(A)).reverse 
    | List.of(A)
    = this.
        if(.Nil) then
            (List.Nil)
        if(.Cons(c)) then
            (c.next.reverse.concat(List.Cons($.value(c.value) next(List.Nil))))


"""
Get a range of integers.
"""
(start Int).to(end Int) 
    | List.of(Int)
    = end.<(start).
        if(.True) then
            (end._forwardTo(start).reverse)
        if(.False) then
            (start._forwardTo(end))

(start Int)._forwardTo(end Int)
    | List.of(Int)
    = end.<(start).
        if(.True) then
            (List.Nil)

        if(.False) then
            (List.Cons($.value(start) next(start.+(1)._forwardTo(end))))


"""
Drop the specified number of elements from the front of this List.
```c
//example
[1,2,3].toList.drop(2) == [3].toList
```
"""
{A Type}
(this List.of(A)).drop(x Int)
    | List.of(A)
    = x.<(1).
        if(.True) then
            (this)

        if(.False) then
            (this.
                if(.Nil) then
                    (List.Nil)

                if(.Cons(c)) then
                    (c.next.drop(x.-(1))))


"""
Take the specified number of elements from the front of this List.

```c
//example
[1,2,3,4,5].toList.take(3) = [1,2,3].toList
```
"""
{A Type}
(this List.of(A)).take(x Int)
    | List.of(A)
    = this.reverse.drop(this.length.-(x)).reverse

"""
Take elements from index `a` until inlcuding index `b` from a List.
```
//example
[9,8,7,6,5].from(1) to(3) return [8,7,6]
```
"""
{A Type}
(this List.of(A)).from(a Int) to(b Int)
    | List.of(A)
    = this.drop(a).take(b.-(a).+(1))


"Convert this Array to List."
{A Type}
(this Array.of(A)).toList 
    = ffi.javascript("""
    (() => {
        if(k$this.length === 0) {
            return k$List.Nil;
        }
        const result = k$List.Cons({value:k$this[0],next:k$List.Nil});
        let value = result;
        for(let i=1;i<k$this.length;i++){
            value.__carry.next = k$List.Cons({value:k$this[i],next:k$List.Nil});
            value = value.__carry.next;
        }
        return result;
    })()
    """).as(List.of(A))

"""
Return the leftmost element in this List that satisfies the given predicate.
```c
//example
[1,2,3].toList.find(.>(1)) = Box.With(2)
```
"""
{A Type}
(this List.of(A)).find(p Function.in(A) out(Boolean))
    | Box.of(A)
    = this.
        if(.Nil) then
            (Box.Empty)
        if(.Cons(c)) then
            (p.apply(c.value).
                if(.True) then
                    (Box.With(c.value))
                if(.False) then
                    (c.next.find(p)))

"""
Partition this List by a predicate.
```c
//example
[1,2,3,4].toList.partitionBy(.>(2)) = $.included([3,4].toList) excluded([1,2].toList)
```
"""
{A Type}
(this List.of(A)).partitionBy(f Function.in(A) out(Boolean))
    | $.included(List.of(A)) excluded(List.of(A))
    = this._partitionBy(f) startingFilled($.included(List.Nil) excluded(List.Nil))

{A Type}
(this List.of(A)).
    _partitionBy(f Function.in(A) out(Boolean))
    startingFilled(previousResult $.included(List.of(A)) excluded(List.of(A)))
    | $.included(List.of(A)) excluded(List.of(A))
    = this.
        if(.Nil) then
            (previousResult)

        if(.Cons(c)) then
            (f.apply(c.value).
                if(.True) then
                    (c.next._partitionBy(f) startingFilled(previousResult.included(.append(c.value))))

                if(.False) then
                    (c.next._partitionBy(f) startingFilled(previousResult.excluded(.append(c.value)))))

"""
Reduce this List into a single value. 
Starts from the most-left element.
"""
{A Type} {B Type}
(this List.of(A)).
    reduceBy(f Function.in($.acc(B) next(A)) out(B))
    startingWith(value B) 
    | B
    = this.
        if(.Nil) then
            (value)
    
        if(.Cons(c)) then
            (c.next.reduceBy(f) startingWith(f.apply($.acc(value) next(c.value))))