= module.import("./Boolean.keli")

"minus"
(x Float).-(y Float)  = ffi.javascript("k$x - k$y").as(Float)

"plus"
(x Float).+(y Float)  = ffi.javascript("k$x + k$y").as(Float)

"multiply"
(x Float).*(y Float)  = ffi.javascript("k$x * k$y").as(Float)

"divide"
(x Float)./(y Float)  = ffi.javascript("k$x / k$y").as(Float)

"modulus"
(x Float).%(y Float) = ffi.javascript("k$x % k$y").as(Float)

"power"
(x Float).^(y Float) =  ffi.javascript("Math.pow(k$x, k$y)").as(Float)

"more than"
(x Float).>(y Float)  = ffi.javascript("k$x > k$y   ? k$Boolean.k$Boolean.True : k$Boolean.k$Boolean.False").as(Boolean)

"less than"
(x Float).<(y Float)  = ffi.javascript("k$x < k$y   ? k$Boolean.k$Boolean.True : k$Boolean.k$Boolean.False").as(Boolean)

"more than or equals to"
(x Float).>=(y Float) = ffi.javascript("k$x >= k$y  ? k$Boolean.k$Boolean.True : k$Boolean.k$Boolean.False").as(Boolean)

"less than or equals to"
(x Float).<=(y Float) = ffi.javascript("k$x <= k$y  ? k$Boolean.k$Boolean.True : k$Boolean.k$Boolean.False").as(Boolean)

"negate a number"
(x Float).negative = ffi.javascript("(-k$x)").as(Float)

"interval comparison"
(a Float).<(b Float)<=(c Float) =
    a.<(b).and(b.<=(c))

"interval comparison"
(a Float).<=(b Float)<(c Float) =
    a.<=(b).and(b.<(c))

"interval comparison"
(a Float).<(b Float)<(c Float) =
    a.<(b).and(b.<(c))

"interval comparison"
(a Float).<=(b Float)<=(c Float) =
    a.<=(b).and(b.<=(c))

"minus"
(x Int).-(y Int)  = ffi.javascript("k$x - k$y").as(Int)

"plus"
(x Int).+(y Int)  = ffi.javascript("k$x + k$y").as(Int)

"multiply"
(x Int).*(y Int)  = ffi.javascript("k$x * k$y").as(Int)

"integral divide, the decimal point would be truncated"
(x Int)./(y Int)  = ffi.javascript("Math.trunc(k$x / k$y)").as(Int)

"modulus"
(x Int).%(y Int) = ffi.javascript("k$x % k$y").as(Int)

"power"
(x Int).^(y Int) =  ffi.javascript("Math.pow(k$x, k$y)").as(Int)

"more than"
(x Int).>(y Int)  = ffi.javascript("k$x > k$y   ? k$Boolean.k$Boolean.True : k$Boolean.k$Boolean.False").as(Boolean)

"less than"
(x Int).<(y Int)  = ffi.javascript("k$x < k$y   ? k$Boolean.k$Boolean.True : k$Boolean.k$Boolean.False").as(Boolean)

"more than or equals to"
(x Int).>=(y Int) = ffi.javascript("k$x >= k$y  ? k$Boolean.k$Boolean.True : k$Boolean.k$Boolean.False").as(Boolean)

"less than or equals to"
(x Int).<=(y Int) = ffi.javascript("k$x <= k$y  ? k$Boolean.k$Boolean.True : k$Boolean.k$Boolean.False").as(Boolean)

"negate a number"
(x Int).negative = ffi.javascript("(-k$x)").as(Int)

"interval comparison"
(a Int).<(b Int)<=(c Int) =
    a.<(b).and(b.<=(c))

"interval comparison"
(a Int).<=(b Int)<(c Int) =
    a.<=(b).and(b.<(c))

"interval comparison"
(a Int).<(b Int)<(c Int) =
    a.<(b).and(b.<(c))

"interval comparison"
(a Int).<=(b Int)<=(c Int) =
    a.<=(b).and(b.<=(c))


"""
Convert Int to Float.
"""
(x Int).toFloat = ffi.javascript("k$x").as(Float)

"""
Convert Float to Int.
"""
(x Float).toInt = ffi.javascript("Math.trunc(k$x)").as(Int)
