= module.import("./Boolean.keli")


"""
Convert this expression into String.
"""
{A Type}
(this A).toString = 
    ffi.javascript("KELI$show(k$this)").as(String)


"""
For concatenating strings.
```c
//example
"Hello".++(" world") = "Hello world"
```
"""
(this String).++(that String) = ffi.javascript("k$this + k$that").as(String)

"""
Get the number of characters of in this String.
```c
//example
"hello".length = 5
```
"""
(this String).length =
    ffi.javascript("k$this.length").as(Int)

"""
Replace every occurence of the `old` String with `new` String.
```c
//example
"Hello world".replace("Hello") with("Bye") = "Bye world"
```
"""
(this String).replace(old String) with(new String) =
    ffi.javascript("k$this.replace(new RegExp(k$old, 'g'), k$new)").as(String)


(this String).toUpperCase =
    ffi.javascript("k$this.toUpperCase()").as(String)

(this String).toLowerCase =
    ffi.javascript("k$this.toLowerCase()").as(String)

(this String).splitBy(that String) =
    ffi.javascript("k$this.split(k$that)").as(Array.of(String))

(this String).startsWith(that String) = 
    ffi.javascript("k$this.startsWith(k$that) ? k$Boolean.k$true : k$Boolean.k$false").as(Boolean)

(this String).endsWith(that String) = 
    ffi.javascript("k$this.endsWith(k$that) ? k$Boolean.k$true : k$Boolean.k$false").as(Boolean)

(this String).contains(that String) =
    ffi.javascript("k$this.includes(k$that) ? k$Boolean.k$true : k$Boolean.k$false").as(Boolean)

(this String).trim = 
    ffi.javascript("k$this.trim()").as(String)

(this String).fromIndex(start Int) toIndex(end Int) = 
    ffi.javascript("k$this.substring(k$start, k$end + 1)").as(String)

