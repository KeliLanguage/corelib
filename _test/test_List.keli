= module.import("../_src/Assertion.keli")
= module.import("../_src/Boolean.keli")
= module.import("../_src/Math.keli")
= module.import("../_src/List.keli")
= module.import("../_src/String.keli")
= module.import("../_src/Box.keli")

xs = [1,2,3].toList

// at
= xs.at(0).shouldBe(Box.With(1))
= xs.at(10).shouldBe(Box.Empty)

// head
= xs.head.shouldBe(Box.With(1))
= List.Nil.head.shouldBe(Box.Empty)

// last
= xs.last.shouldBe(Box.With(3))
= List.Nil.last.shouldBe(Box.Empty)

// tail
= xs.tail.shouldBe([2,3].toList)
= List.Nil.tail.shouldBe(List.Nil)

// init
= xs.init.shouldBe([1,2].toList)
= List.Nil.init.shouldBe(List.Nil)

// length
= xs.length.shouldBe(3)
= List.Nil.length.shouldBe(0)

// isEmpty
= xs.isEmpty.shouldBe(false)
= List.Nil.isEmpty.shouldBe(true)

// append
= xs.append(4).shouldBe([1,2,3,4].toList)
= List.Nil.append(1).shouldBe([1].toList)

// prepend
= xs.prepend(0).shouldBe([0,1,2,3].toList)
= List.Nil.prepend(0).shouldBe([0].toList)

// where
= xs.where(.equals(2)).shouldBe([2].toList)
= List.Nil.where(.equals(2)).shouldBe(List.Nil)

// select
= xs.select(.*(2)).shouldBe([2,4,6].toList)
= List.Nil.select(.*(2)).shouldBe(List.Nil)

// select where
= xs.select(.*(2)) where(.>(2)).shouldBe([6].toList)

// some
= xs.some(.<(1)).shouldBe(false)
= xs.some(.>(1)).shouldBe(true)

// every
= xs.every(.>(0)).shouldBe(true)
= xs.every(.>(1)).shouldBe(false)

// concat
= xs.concat(xs).shouldBe([1,2,3,1,2,3].toList)
= List.Nil.concat(xs).shouldBe(xs)

// reverse
= [1,2,3].toList.reverse.shouldBe([3,2,1].toList)

// to
= 0.to(10).shouldBe([0,1,2,3,4,5,6,7,8,9,10].toList)
= 5.to(1).shouldBe([5,4,3,2,1].toList)

// drop
= xs.drop(2).shouldBe([3].toList)
= List.Nil.drop(1).shouldBe(List.Nil)

// take 
= xs.take(2).shouldBe([1,2].toList)

// from to
= 0.to(5).from(1)to(4).shouldBe([1,2,3,4].toList)

// find
= xs.find(.equals(2)).shouldBe(Box.With(2))
= List.Nil.find(.equals(2)).shouldBe(Box.Empty)

// partition 
= xs.partitionBy(.>(1)).shouldBe($.included([2,3].toList) excluded([1].toList))

// reduce
= xs.reduceBy(x | x.acc.+(x.next)) startingWith(0).shouldBe(6)

= ["a","b","c"].toList.reduceBy(.++) startingWith("").shouldBe("abc")

(this $.acc(String) next(String)).++ =
    this.acc.++(this.next)
